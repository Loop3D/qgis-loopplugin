# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Loop_plugin
                                 A QGIS plugin
 This plugin preprocess shapefile inputs to generate python script and json file that are used as input for map2loop
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-10-13
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Michel M. Nzikou / CET - UWA
        email                : michel.nzikou@alumni.uleth.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import json
#
BASE_DIR           = os.path.dirname(__file__)
help_config_path   = str(BASE_DIR)+'/help_config.json'


def show_my_info(self):
   '''
   This function is used to populate text information once the mouse is hovering a button.
   '''
   button_list= [self.PrjImage,self.Project_Label,self.SearchFolder, self.FolderSearch_Button,
               self.GeolButton, self.FaultButton,self.StructButton,self.DTMButton,
               self.OrientationButton,self.ROIButton,self.DrillholesButton, self.SectionsButton, self.FoldButton, self.ConfigButton,
               self.Saveconfig_pushButton,self.Map2Loop_Button,self.LoopStructural_Button,self.btnPush,
               self.Qgis_checkBox,self.Aus_checkBox,self.File_checkBox,self.Http_checkBox,self.Qgis_comboBox,self.Ok_pushButton,
               self.map2loop_label_2,self.map2loop_label_1,self.map2loop_label_3,self.map2loop_Ok_pushButton]
   button_text =['Project directory icon','Project directory name','To be filled by the project directory path','Click to select your project directory',
               'Click to load your Geology layer','click to load your Fault layer','click to load your Structure Point layer','Click to load your DTM or Map layer',
               'Orientation layer','To create a Region of interest','To load Drill Hole data','Section layer','To load your Fold layer','To create your configuration parameters',
               'To create and save the configuration file in the project directory','To run map2loop','To run loopstructural','To close the plugin',
               'To select layers from QGIS panel','To select layer from GA webserver','To select a layer from your pc','To select layer from your own web address','To be filled with available layers on QGIS panel','To save selected layer in combobox above',
               'Your name or computer name','remote server ip address', 'default port: Enter 8000','Click OK to execute map2loop']
   label_tool_tip(button_list,button_text)

def layer_show_tooltype(self,sender):
   # Here we define the info that are attached to the layer associated to individual Qpush button such as:
   # Geol...>[Formation*,Group, Supergroup, Description, Fm code, Rocktype 1, Rocktype 2, Polygon ID, Min Age, Max Age ] 
   # uniqueID[]
   with open(help_config_path) as complex_data:
     data = json.load(complex_data)
   for majorkey in data:
      if majorkey=='struct_params':
         struct_param_help=[a for a in data[majorkey].values()] 
      if majorkey=='fault_params':
         fault_param_help=[a for a in data[majorkey].values()]
      if majorkey=='Orientations_dictionary':
         if '_help' in str(data[majorkey].keys()):
            fault_layer_help =[a for a in data[majorkey].values() if type(a) is not list]
      if majorkey=='Fault_and_folds':
         if '_help' in str(data[majorkey].keys()):
            ffault_layer_help =[a for a in data[majorkey].values() if type(a) is not list]
      if majorkey== 'geology_params':
         geol_param_help=[a for a in data[majorkey].values()]
      if majorkey=='ids_dictionary': 
         layer_id =[a for a in data[majorkey].values() if type(a) is not list]   
      if majorkey=='timing':
         max_min_help =[a for a in data[majorkey].values() if type(a) is not list]
      if majorkey=='stratigraphy_dictionary':
        if '_help' in str(data[majorkey].keys()):
            geol_layer_help =[a for a in data[majorkey].values() if type(a) is not list]

   label_list =[self.moving_Label_1,self.moving_Label_2,self.moving_Label_3,self.moving_Label_4,self.moving_Label_5,
               self.moving_Label_6,self.moving_Label_7,self.moving_Label_8,self.moving_Label_9,self.moving_Label_10,
               self.Sill_Label,self.Intrusion_Label] 
   param_list = [self.param_label1,self.param_label2,self.param_label3,self.param_label4,self.param_label5,
               self.param_label6,self.param_label7,self.param_label8,self.param_label9]  
   if sender=='GeolButton':
      self.ImageLabel.move(600,285)
      # slicing the list
      lay           =geol_layer_help[:-1]
      lay_part1     =lay[:-2]
      lay_part2     =lay[-2:]
      geol_lay_tooltype = lay_part1 + layer_id[:-1]+max_min_help+lay_part2
      # Appending info to Qt feature
      label_tool_tip(label_list,geol_lay_tooltype)
      label_tool_tip(param_list,geol_param_help)
      return
   elif sender=='FaultButton':
      self.ImageLabel.move(600,285)
      fault_lay_tooltype= fault_layer_help[0:4]+[ffault_layer_help[-1]]+ layer_id[:-1]+[fault_layer_help[4]]+ffault_layer_help[0:2]
      # slicing the list
      flabel_list=label_list[0:7]+label_list[-2:]
      fpar_list = param_list[0:3]
      label_tool_tip(flabel_list,fault_lay_tooltype)
      label_tool_tip(fpar_list,fault_param_help)
      return
   
   elif sender=='StructButton':
      self.ImageLabel.move(600,285)
      slabel_list=label_list[0:6]+label_list[len(label_list)-2:]
      spar_list =param_list[0:]
      struct_lay_tooltype=fault_layer_help[0:3]+[fault_layer_help[4]]+fault_layer_help[-1:]+layer_id[:-1]+fault_layer_help[-2:] 
      label_tool_tip(slabel_list,struct_lay_tooltype)
      label_tool_tip(spar_list,struct_param_help)
      return
   else:
      pass

   return



def label_tool_tip(param_list ,tooltype_text):
   '''
   This function set the text into qtooltype feature
   # param_list: It contain the list of dt feature to show info once mouse hover onto it
   # tooltype_text: It contain the list of text (str) associated to feature in the above list 
   '''
   for label, text in zip(param_list,tooltype_text ):
         label.setToolTip(str(text)) 

